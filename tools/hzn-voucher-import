#!/bin/bash

# Sample script that imports a SDO ownership voucher and creates the corresponding resources in the exchange
# Note: this script will be implemented in the hzn command

usage() {
    exitCode=${1:-0}
    cat << EndOfMessage
Usage: ${0##*/} <voucher-file> [<example>]

Environment Variables that must be set:
  HZN_EXCHANGE_URL
  HZN_MGMT_HUB_CERT_PATH
  HZN_ORG_ID
  HZN_EXCHANGE_USER_AUTH
Optional Environment Variables:
  HZN_SDO_SVC_URL
EndOfMessage
    exit $exitCode
}

if [[ -z $1 || $1 == '-h' || $1 == '--help' ]]; then usage 0; fi

voucherFile=$1
example=$2
HZN_SDO_SVC_URL=${HZN_SDO_SVC_URL:-http://localhost:9008/api}

# These env vars are required
: ${HZN_EXCHANGE_URL:?} ${HZN_MGMT_HUB_CERT_PATH:?} ${HZN_ORG_ID:?} ${HZN_EXCHANGE_USER_AUTH:?}

# Check the exit code passed in and exit if non-zero
chk() {
    local exitCode=$1
    local task=$2
    local dontExit=$3   # set to 'continue' to not exit for this error
    if [[ $exitCode == 0 ]]; then return; fi
    echo "Error: exit code $exitCode from: $task"
    if [[ $dontExit != 'continue' ]]; then
        exit $exitCode
    fi
}

# Verify that the prereq commands we need are installed
confirmcmds() {
    for c in $*; do
        #echo "checking $c..."
        if ! which $c >/dev/null; then
            echo "Error: $c is not installed but required, exiting"
            exit 2
        fi
    done
}

# Generate a random node token - not used because the ocs-api POST voucher returns this, but kept here for reference
#generateNodeToken() {
#    cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 45 | head -n 1   # stolen from agent-install.sh
#    chk $? 'generate node token'
#}

# Create the node in the exchange
createNode() {
    local nodeId=$1
    local nodeToken=$2
    hzn exchange node create -n "$nodeId:$nodeToken"
    chk $? 'create node'
}

# Create the node policy in the exchange, if they chose an example, or specified node policy
createNodePolicy() {
    local nodeId=$1
    local example=$2
    local policyJson='{ "properties": [ { "name": "openhorizon.example", "value": "'$example'" } ] }'
    hzn exchange node addpolicy $nodeId -f-  <<< $policyJson
    chk $? 'create node policy'
}

# Main
confirmcmds hzn jq # base64 hexdump fold

# We are assuming ocs-api was started with the correct env vars to create then non-device-specific files, so we don't have to run POST /api/config

# Import voucher and get node id and token
echo "Importing voucher: POST $HZN_SDO_SVC_URL/voucher ..."
output=$(curl -sS -w "%{http_code}" -X POST -H "Content-Type: application/json" -d @$voucherFile $HZN_SDO_SVC_URL/voucher)
chk $? 'import voucher'
# output looks like: {"deviceUuid":"3afde2eb-2c6f-4c5c-ac44-e8045e0cca69","nodeToken":"c0ac3e450aedfabccf502b018a5d44b364c920739d08"}201
httpcode=${output:$((${#output}-3))}    # the last 3 chars are the http code
if [[ "$httpcode" != "201" ]]; then
    echo "Error: HTTP code $httpcode from POST $HZN_SDO_SVC_URL/voucher: $output"
    exit 3
fi
json="${output%[0-9][0-9][0-9]}"   # for the output, get all but the 3 digits of http code
#echo "Verbose: response body: $json"
nodeId=$(jq -r .deviceUuid <<< $json)
nodeToken=$(jq -r .nodeToken <<< $json)
echo "Voucher imported. Node id: $nodeId, token: $nodeToken"
if [[ -z "$nodeId" || -z "$nodeToken" ]]; then
    echo "Error: received an empty node id or token"
    exit 4
fi

# Create node in exchange and optionally node policy
echo "Creating node $nodeId ..."
createNode $nodeId $nodeToken
# the hzn cmd already echoes this: echo "Node $nodeId created/updated in the exchange"

if [[ -n $example ]]; then
    echo "Creating node $nodeId policy ..."
    createNodePolicy $nodeId $example
    # the hzn cmd already echoes this: echo "Node $nodeId policy for $example created/updated in the exchange"
fi
